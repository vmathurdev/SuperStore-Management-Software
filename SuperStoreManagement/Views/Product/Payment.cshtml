@model SuperStoreManagement.Models.PaymentModel


<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<link type="text/css" rel="stylesheet" href="https://cdn01.jotfor.ms/themes/CSS/5e6b428acc8c4e222d1beb91.css?themeRevisionID=5f30e2a790832f3e96009402" />

<script type="text/javascript">
    $(document).ready(function () {
        $("#paynow").click(function () {
            matchCardRegex();
            //ValidationForm();
        })
    });
        function ValidationForm() {
        console.log('reached');
            if (!$("#paymentForm").valid()) {
                return false;
            }
        }
    function matchCardRegex() {
        var cardType = $("#cardType").val();
        var input = $("#cardNumber").val();
        var cvv = $("#cvv").val(); //expiryDate
        var expiryDate = $("#expiryDate").val();
        var month = expiryDate.split('/')[0];
        var year = expiryDate.split('/')[1];
        var cardHolderName = $("#cardHolderName").val();
        // 
        if (new Date(`${month}/01/${year}`) < new Date()) {
            $("#expiryDate-customerror").removeClass("d-none");
            $("#expiryDate-customerror").text("Expiry Date should be greater than current date");
        } else {
            $("#expiryDate-customerror").addClass("d-none");
            console.log("Expiry Date is Perfect");
        }

        if (!/^[a-z A-Z]+$/.test(cardHolderName)) {
            $("#cardHolderName-customerror").removeClass("d-none");
            $("#cardHolderName-customerror").text("Card holder name is invalid");
        } else {
            $("#cardHolderName-customerror").addClass("d-none");
            console.log("Card holder name is Perfect");
        }

        if (cardType == "master") {
            if (!/^5[1-5][0-9]{14}$/.test(input)) {
                $("#cardType-customerror").removeClass("d-none");
                $("#cardType-customerror").text("Please enter a valid Mastercard Number");
            } else {
                $("#cardType-customerror").addClass("d-none");
                console.log("MasterCard Number is Perfect");
            }

            if (cvv.length!=3) {
                $("#cvv-customerror").removeClass("d-none");
                $("#cvv-customerror").text("Please enter a valid Mastercard CVV");
            } else {
                $("#cvv-customerror").addClass("d-none");
                console.log("MasterCard CVV is Perfect");
            }
        } else if (cardType == "visa") {
            if (!/^4[0-9]{15}$/.test(input)) {
                $("#cardType-customerror").removeClass("d-none");
                $("#cardType-customerror").text("Please enter a valid Visa Number");
            } else {
                $("#cardType-customerror").addClass("d-none");
                console.log("Visa Number is Perfect");
            }

            if (cvv.length != 3) {
                $("#cvv-customerror").removeClass("d-none");
                $("#cvv-customerror").text("Please enter a valid Visa CVV");
            } else {
                $("#cvv-customerror").addClass("d-none");
                console.log("Visa CVV is Perfect");
            }
        } else if (cardType == "amex") {
            if (!/^3[47][0-9]{13}$/.test(input)) {
                $("#cardType-customerror").removeClass("d-none");
                $("#cardType-customerror").text("Please enter a valid American Express Number");
            } else {
                $("#cardType-customerror").addClass("d-none");
                console.log("American Express Number is Perfect");
            }

            if (cvv.length != 4) {
                $("#cvv-customerror").removeClass("d-none");
                $("#cvv-customerror").text("Please enter a valid Amex CVV");
            } else {
                $("#cvv-customerror").addClass("d-none");
                console.log("Amex CVV is Perfect");
            }
        }

        if (!validateZIP($("#country").val(), $("#postalCode").val())) {
            $("#country-customerror").removeClass("d-none");
            $("#country-customerror").text("Please enter a valid postal code");
        } else {
            $("#country-customerror").addClass("d-none");
            $("#country-customerror").text("");
        }

        if (!validatePhoneNumber($("#country").val(), $("#phoneNumber").val())) {
            $("#phoneNumber-error").removeClass("d-none");
            $("#phoneNumber-error").text("Please enter a valid phone number");
        } else {
            $("#phoneNumber-error").addClass("d-none");
            $("#phoneNumber-error").text("");
        }

        if (!/^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test($("#email").val())) {
            $("#email-error").removeClass("d-none");
            $("#email-error").text("Please enter a valid email");
        } else {
            $("#email-error").addClass("d-none");
            $("#email-error").text("");
        }

        @*
            if (!/^[a-zA-Z\s]*$/.test($("#city"))) {
                $("#city-error").removeClass("d-none");
                $("#city-error").text("Please enter a valid city");
            } else {
                $("#city-error").addClass("d-none");
                $("#city-error").text("");
            }

            if (!/^[a-zA-Z\s]*$/.test($("#province"))) {
                $("#province-error").removeClass("d-none");
                $("#province-error").text("Please enter a valid province");
            } else {
                $("#province-error").addClass("d-none");
                $("#province-error").text("");
            }
        *@
    }

        function validateZIP(Country, ZIP)
        {
            //var canRegex = new RegExp("/^[ABCEGHJ-NPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ -]?\d[ABCEGHJ-NPRSTV-Z]\d$/i");
            //var usaRegex = new RegExp("/(^\d{5}$)|(^\d{5}-\d{4}$)/");

            var zipValid = false;
            console.log("&&&&&",Country, ZIP);
            if ((Country == "Other") || (Country == "Canada" && /^[ABCEGHJ-NPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ -]?\d[ABCEGHJ-NPRSTV-Z]\d$/i.test(ZIP)) || (Country == "USA" && /(^\d{5}$)|(^\d{5}-\d{4}$)/.test(ZIP)))
            {
                zipValid = true;
            }
            else
            {
                zipValid = false;
            }
            console.log("&&&&&", zipValid);
            return (zipValid);
        }

        function validatePhoneNumber(Country, phoneNumber)
        {

            var valid = false;

            if ((Country == "Other") || /^(\+?1 ?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/.test(phoneNumber))
            {
                valid = true;
            }
            else
            {
                valid = false;
            }

            return (valid);
        }
</script>


<html>
<head>
    <link rel="stylesheet" href="~/css/payment.css" />
    <link rel="script" href="~/js/site.js" />
</head>
<body>

    <div class="main">
        @using (Html.BeginForm("paid", "Product", FormMethod.Post))
        {
            <form id="paymentForm">
                <p class="title">Payment Gateway</p>
                <div class="row">
                    <label class="col-sm-4">
                        Select type of Card
                    </label>
                    @Html.DropDownList("cardType", new List<SelectListItem>
                    {
                       new SelectListItem{ Text="Select card type", Value = ""},
                       new SelectListItem{ Text="MasterCard", Value = "master" },
                       new SelectListItem{ Text="Visa", Value = "visa" },
                       new SelectListItem{ Text="American Express", Value = "amex" }
                      })
                    @Html.ValidationMessageFor(expression: model => model.cardType, null, htmlAttributes: new { @class = "text-danger" })
                </div>
                <br />
                <div class="row">
                    <label class="col-sm-4">
                        Name
                    </label>
                    @Html.TextBoxFor(expression: model => model.cardHolderName, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.cardHolderName, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="cardHolderName-customerror" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        City
                    </label>
                    @Html.TextBoxFor(expression: model => model.city, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.city, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="city-error" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Province
                    </label>
                    @Html.TextBoxFor(expression: model => model.province, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.province, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="province-error" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Email
                    </label>
                    @Html.TextBoxFor(expression: model => model.email, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.email, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="email-error" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Card Number
                    </label>
                    @Html.TextBoxFor(expression: model => model.cardNumber, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.cardNumber, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="cardType-customerror" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Expiry Date
                    </label>
                    @Html.TextBoxFor(expression: model => model.expiryDate, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.expiryDate, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="expiryDate-customerror" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Select country
                    </label>
                    @Html.DropDownList("country", new List<SelectListItem>
                    {
                       new SelectListItem{ Text="Select Country", Value = ""},
                       new SelectListItem{ Text="USA", Value = "USA" },
                       new SelectListItem{ Text="Canada", Value = "Canada" },
                       new SelectListItem{ Text="Other", Value = "Other" }
                      })
                    @Html.ValidationMessageFor(expression: model => model.country, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="country-customerror" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Postal Code
                    </label>
                    @Html.TextBoxFor(expression: model => model.postalCode, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.postalCode, null, htmlAttributes: new { @class = "text-danger" })
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        Phone Number
                    </label>
                    @Html.TextBoxFor(expression: model => model.phoneNumber, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.phoneNumber, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="phoneNumber-error" class="d-none"></span></span>
                </div>
                <div class="row">
                    <label class="col-sm-4">
                        CVV
                    </label>
                    @Html.PasswordFor(expression: model => model.cvv, htmlAttributes: new { @class = "paySearchInput col-sm-6" })
                    @Html.ValidationMessageFor(expression: model => model.cvv, null, htmlAttributes: new { @class = "text-danger" })
                    <span class="text-danger field-validation-error"><span id="cvv-customerror" class="d-none"></span></span>
                </div>
                <button class="paySearchButton" id="paynow" type="submit">
                    Pay
                </button>
            </form>
        }
    </div>
</body>
</html>
